@model IEPLeaveManagementSystem.Models.LeaveViewModel

@{
    ViewBag.Title = "Response";
}
@using (Html.BeginForm("ApproveLeave", "SecondLeave", FormMethod.Post, new { id = "setLeaveForm" }))
{
<div class="form-horizontal">
    <h2>Details</h2>

    <h4>Leave</h4>
   
        <hr />

        @Html.HiddenFor(model => model.RequestId)
        @Html.HiddenFor(model => model.EmployeeId)
        @Html.HiddenFor(model => model.Type)
        @Html.HiddenFor(model => model.StartingDate)
        @Html.HiddenFor(model => model.EndingDate)
        @Html.HiddenFor(model => model.NumberOfDate)
    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.StartingDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.StartingDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.StartingDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.EndingDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EndingDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.EndingDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.NumberOfDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NumberOfDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.NumberOfDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.Total, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Remaining, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Remaining, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.Remaining, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.IfApproved, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.IfApproved, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.IfApproved, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.requestdate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.requestdate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.requestdate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FirstSupervisorComment, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FirstSupervisorComment, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.FirstSupervisorComment, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.SecondSupervisorComment, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SecondSupervisorComment, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SecondSupervisorComment, "", new { @class = "text-danger" })
        </div>
    </div>

        <div class="form-horizontal">
            <div class="form-group">
                <div class="col-md-2">
                    <p>
                        @Html.ActionLink("Back to List", "Index")
                    </p>
                </div>
                <div class="col-md-1">
                    <input type="submit" id="btnApprove" value="Approve" onclick="ApproveLeave();" class="btn btn-primary" />
                </div>

                <div class="col-md-1">
                    <input type="submit" id="btnReject" value="Reject" onclick="RejectLeave();" class="btn btn-primary" />
                </div>
            </div>
        </div>

        <div id="wait" style="display:none;width:70px;height:89px;border:0px solid black;position:absolute;top:50%;left:50%;padding:2px;"><img src="~/image/loader.gif" width="64" height="64" /><br>Processing..</div>

        </div>
    }
    <script type="text/javascript" language="javascript">
        function ApproveLeave() {
            $("#setLeaveForm").on("submit", function (e) {
                e.preventDefault();

                var isOk = confirm("Confirm the leave request ?");

                if (isOk) {
                    $.ajax({
                        url: this.action,
                        type: this.method,
                        data: $(this).serialize(),
                        beforeSend: Loading(),
                        success: function (data) {
                            if (data.status == "Success") {
                                alert("Request is Approved");
                                window.location.href = "@Url.Action("Index", "SecondLeave")";
                            } else if (data.status == "Invalid") {
                                alert("Can not approve the request, because there is no remaining leaves");
                                window.location.href = "@Url.Action("Index", "SecondLeave", new { id = Model.EmployeeId })";
                            }
                        },
                    });
                } else {
                    alert("Error occurs on the Database level!");
                    window.location.href = "@Url.Action("Index", "SecondLeave")";
                }
            })
        }
        function RejectLeave() {
            $("#setLeaveForm").on("submit", function (e) {
                e.preventDefault();

                var isOk = confirm("reject the leave request ?");

                if (isOk) {
                    $.ajax({
                        url: '@Url.Action("RejectLeave", "SecondLeave")',
                        type: this.method,
                        data: $(this).serialize(),
                        beforeSend: Loading(),
                        success: function (data) {
                            if (data.status == "Success") {
                                alert("Request is rejected");
                                window.location.href = "@Url.Action("Index", "SecondLeave")";
                            }
                        }
                    });
                } else {
                    alert("Error occurs on the Database level!");
                    window.location.href = "@Url.Action("Index", "SecondLeave")";
                }
            })
        }
        function Loading() {

            $("#btnApprove").attr("disabled", "disabled");
            $("#btnReject").attr("disabled", "disabled");

            $(document).ajaxStart(function () {
                $("#wait").css("display", "block");
            });
            $(document).ajaxComplete(function () {
                $("#wait").css("display", "none");
            });
            $("button").click(function () {
                $("#txt").load("demo_ajax_load.asp");
            });
        }
    </script>



